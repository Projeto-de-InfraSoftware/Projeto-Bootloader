%ifndef BLOCKLOGIC_MAC
    %define BLOCKLOGIC_MAC
    ;; ------------------------------------MACROS--------------------------------------------
    ;;
    %macro blockPos 0
        sub ax, cx
        mov ch, 16
        div ch
    %endmacro

    %macro modOP 1
        mov ch, al
        mov dh, %1
        div dh
        mul dh
        sub ch, al
    %endmacro

    %macro movementMacro 0
        mov ax, actualGridPos
        mov cx, gridArray
        mov bl, directionKey
        cmp bl,0x77 ; bl is 'w'?
        ;; je upMov
        cmp bl, 0x61 ;bil is 'a'
        ;; je leftMov
        cmp bl, 0x64 ;bl is 'd'
        ;; je rightMov
        cmp bl, 0x73 ;bl is 's'
    %endmacro

    %macro checkIfEqual 0
        mov ax, [actualGridPos]
        mov dx, [gridArray + si]
        mov bx, 0b0000111111111111
        and bx, ax              ;apply bitmask to bx
        and dx, bx              ;apply bitmask to dx
        cmp dx, bx              ;check if both are equal
    %endmacro

    %macro scoreINC 0
        mov dx, scoreArray
        mov bx, 0b0000011111111111
        and bx, ax
        add [scoreArray], bx
    %endmacro

    %macro multiplyValueBy2 0
        mov bx, 0b1111111111111111
        shl ax, 1
        and ax, bx
        mov bx, 0b0000100000000000 ;check if 2048 has been achieved
        and bx, ax
        jnz winScreen
    %endmacro

    ;; ---------------------------------ROUTINES----------------------------------------------
    loopGrid:
        mov bx, gridArray ;start of grid
        mov si, 0
        mov cl, 0               ;counter
        .loop:
            mov [actualGridPos], bx
            call dx ;dx will be the address of one of the "block functions"
            add si, 2
            lea bx, [gridArray+si] ;loop through the array, 2bytes = 1w per "array index"
            cmp si, 16
            jne .loop
        ret

    moveBlocks:
        pusha
        mov dx, bitCheckFill
        movementMacro
        nothing1:
            popa
            ret

    bitCheckFill:
        mov bx, [gridArray + si]
        and bx, 0b000100000000000 ;bitmask to check if filled
        jnz nothing1
        call updateBlock
        jmp nothing1

    directionMatch:
        pusha
        mov dx, blockMatch
        movementMacro
        jmp nothing1

    blockMatch:
        checkIfEqual
        jne nothing1
        multiplyValueBy2
        scoreINC
        mov [actualGridPos], ax
            updateBlock:
            mov dx, actualGridPos
            mov [gridArray + si], dx
            mov dx, 0000000000000000 ;reset the state
            mov [actualGridPos], dx
            ret

    fillBlock:
        pusha
        getRandom
        mov dx, 0001000000000010
        mov [actualGridPos + si], dx
        popa
        ret

    isGameOver:
        cmp cl, 16
        je gameOverScreen
        mov si, [bx]
        cmp si, 0
        jnz counterINC
            nothing2:
                ret

    counterINC:
        inc cl
        jmp nothing2


    upMov:
        blockPos
        cmp al, 4               ;specific to this case
        jl nothing1
        xor ah, ah
        mov si, ax
        sub si, 3               ;index above the position
        shl si,1
        call dx
        jmp nothing1


    downMov:
        blockPos
        cmp al, 11
        ja nothing1
        xor ah, ah
        mov si, ax
        add si, 3
        shl si, 1
        call dx
        jmp nothing1

    leftMov:
        blockPos
        mov bl, al
        xor bh, bh
        modOP 4
        jz nothing1            ;0,4,8,12 boundaries
        mov si, bx
        dec si
        shl si,1
        call dx
        jmp nothing1

    rightMov:
        blockPos
        mov bl, al
        xor bh, bh
        modOP 4
        cmp si, 3               ;3, 7,11,15 boundaries
        je nothing1
        mov si, bx
        inc si
        shl si,1
        call dx
        jmp nothing1

%endif
