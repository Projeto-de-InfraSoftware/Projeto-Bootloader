%ifndef BASICIO_MAC
    %define BASICIO_MAC

    %macro seedRandom 0
        mov AH, 00h  ; gets the time
        int 1AH      ; CX:DX = ticks since midnight

        mov  ax, dx
        xor  dx, dx
        mov  cx, 20
        div  cx       ;  dx = remainder
    %endmacro

    %macro randomBlock 0
        add  dl, '9' ;add '9' to make the sequence seem random
        mov cx, 16
        mov  ax, dx
        xor  dx, dx
        div  cx ; dx = remainder of dl%15
        mov cl, dl
    %endmacro

    ;makes si=dl*2
    %macro fillIndex 0
        mov al, dl
        mov si, 0

        .loopIndex:
        cmp al,0
        je .endIndex

        dec al
        add si,2
        jmp .loopIndex
        .endIndex:
    %endmacro

    ;returns valid position
    %macro emptyChecker 0
        fillIndex

        jmp .loop
        .resetIndex:
        sub si, si
        sub dl,dl

        .loop:
        mov cx, [gridArray+si]
        cmp cx,0
        jz .end

        cmp si,32
        je .resetIndex ;if (si==32) resets index values

        add si,2 ;incrementa o contador
        inc dl
        jmp .loop
    .end:
    %endmacro


    %macro getRandom 0
        seedRandom
        randomBlock
        emptyChecker
    %endmacro

    getKey:
        mov ah, 0x00
        int 16h
    ret                         ;al has key

    validateKey1:
        cmp al, 0x77            ;w
        je upMov2
        cmp al, 0x73            ;s
        je downMov2
        cmp al,0x20             ;space
        ;; je confirm
        ;; call getKey
        jmp validateKey1

    validateKey2:
        cmp al, 0x77            ;w
        je storeKey
        cmp al, 0x73            ;s
        je storeKey
        cmp al, 0x61            ;a
        je storeKey
        cmp al, 0x64            ;d
        je storeKey
        call getKey
        jmp validateKey2

    storeKey:
        mov [directionKey], al
        jmp move

    upMov2:
        mov ax, choiceMenu
        mov si, choiceMenuPos
        sub ax, si
        mov ch, 5
        div ch
        cmp al, 0
        je getKey
        mov si, ax
        sub si, 2
        mov dx, [choiceMenu+si]
        mov [choiceMenuPos], dx
        jmp menuScreen

    downMov2:
        mov ax, choiceMenu
        mov si, choiceMenuPos
        sub ax, si
        mov cl, 5
        div cl
        cmp al, 5
        je getKey
        mov si, ax
        add si, 2
        mov dx, [choiceMenu+si]
        mov [choiceMenuPos], dx
        jmp menuScreen

    confirm:
        mov dx, [choiceMenuPos]
        cmp dx, 'START GAME'
        je action
        cmp dx, 'QUIT GAME'
        je end
        cmp dx, 'CREDITS'
        je creditsScreen
        cmp dx, 'RETURN'
        je menuScreen

%endif
